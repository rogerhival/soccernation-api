// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Soccernation.Models;
using System;

namespace Soccernation.Migrations
{
    [DbContext(typeof(SoccernationContext))]
    [Migration("20180427140937_courts changes and n to n relationship with competition")]
    partial class courtschangesandntonrelationshipwithcompetition
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Soccernation.Models.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime>("EndDateUtc");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDateUtc");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Status");

                    b.Property<decimal?>("SubscriptionPrice");

                    b.Property<string>("TypeOfCompetition");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Soccernation.Models.CompetitionsCourts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompetitionId");

                    b.Property<Guid>("CourtId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CourtId");

                    b.ToTable("CompetitionsCourts");
                });

            modelBuilder.Entity("Soccernation.Models.CompetitionsTeams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompetitionId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("HasPaid");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Status");

                    b.Property<Guid?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TeamId");

                    b.ToTable("CompetitionsTeams");
                });

            modelBuilder.Entity("Soccernation.Models.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("Soccernation.Models.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompetitionId");

                    b.Property<Guid?>("CourtId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime>("DateUtc");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<int>("Round");

                    b.Property<string>("Status");

                    b.Property<Guid>("TeamHomeId");

                    b.Property<int>("TeamHomeScore");

                    b.Property<Guid>("TeamVisitorId");

                    b.Property<int>("TeamVisitorScore");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("TeamHomeId");

                    b.HasIndex("TeamVisitorId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("Soccernation.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<string>("AvatarLarge");

                    b.Property<string>("AvatarThumb");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<Guid?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Soccernation.Models.ResultRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompetitionId");

                    b.Property<int>("ConcedeForfeits");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("Draws");

                    b.Property<int>("Forfeits");

                    b.Property<int>("GoalsAgainst");

                    b.Property<int>("GoalsFor");

                    b.Property<int>("Loses");

                    b.Property<int>("Matches");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<short>("Position");

                    b.Property<string>("Status");

                    b.Property<Guid?>("TeamId");

                    b.Property<int>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TeamId");

                    b.ToTable("ResultRows");
                });

            modelBuilder.Entity("Soccernation.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("LogoImage");

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Soccernation.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<Guid?>("PlayerId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Soccernation.Models.CompetitionsCourts", b =>
                {
                    b.HasOne("Soccernation.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Soccernation.Models.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Soccernation.Models.CompetitionsTeams", b =>
                {
                    b.HasOne("Soccernation.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.HasOne("Soccernation.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Soccernation.Models.Fixture", b =>
                {
                    b.HasOne("Soccernation.Models.Competition")
                        .WithMany("Fixtures")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("Soccernation.Models.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("Soccernation.Models.Team", "TeamHome")
                        .WithMany()
                        .HasForeignKey("TeamHomeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Soccernation.Models.Team", "TeamVisitor")
                        .WithMany()
                        .HasForeignKey("TeamVisitorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Soccernation.Models.Player", b =>
                {
                    b.HasOne("Soccernation.Models.Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Soccernation.Models.ResultRow", b =>
                {
                    b.HasOne("Soccernation.Models.Competition")
                        .WithMany("Results")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("Soccernation.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Soccernation.Models.User", b =>
                {
                    b.HasOne("Soccernation.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
